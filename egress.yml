apiVersion: v1
kind: Namespace
metadata:
  name: egress
---
apiVersion: v1
kind: Service
metadata:
  name: proxy
  namespace: egress
  labels:
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/name: egress-proxy
spec:
  selector:
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/name: egress-proxy
  ports:
  - name: http
    port: 80
    targetPort: 8080
  - name: proxy
    port: 8080
    targetPort: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx
  namespace: egress
  labels:
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/name: egress-proxy
data:
  nginx.conf: |-
    events {
    }
    http {
      include /etc/nginx/resolvers-data/resolvers.conf;

      server {
        listen     8080;

        location / {
          if ($host ~* "(.*)\.egress\.local") {
            set $real_host $1;
          }

          proxy_pass https://$real_host;
          proxy_set_header Host $real_host;
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: egress
  labels:
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/name: egress-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: nginx
      app.kubernetes.io/name: egress-proxy
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
      labels:
        app.kubernetes.io/instance: nginx
        app.kubernetes.io/name: egress-proxy
    spec:
      volumes:
      - name: config
        configMap:
          name: nginx
      - name: resolvers-data
        emptyDir: {}
      initContainers:
        - name: setup-resolvers
          image: busybox:1.28
          command: ["sh", "-c", "echo resolver $(awk 'BEGIN{ORS=\" \"} $1==\"nameserver\" {print $2}' /etc/resolv.conf)\";\" > /etc/nginx/resolvers-data/resolvers.conf"]
          volumeMounts:
            - name: resolvers-data
              mountPath: /etc/nginx/resolvers-data
      containers:
      - name: nginx
        image: nginx:1.17
        ports:
        - name: http
          containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/nginx
        - name: resolvers-data
          mountPath: /etc/nginx/resolvers-data
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: egress
  labels:
    app.kubernetes.io/instance: coredns
    app.kubernetes.io/name: coredns
data:
  Corefile: |-
    .:53 {
        errors
        health {
            lameduck 5s
        }
        ready
        kubernetes cluster.local in-addr.arpa ip6.arpa {
            pods insecure
            fallthrough in-addr.arpa ip6.arpa
            ttl 30
        }
        prometheus 0.0.0.0:9153
        forward . /etc/resolv.conf
        cache 30
        loop
        reload
        loadbalance
        rewrite name regex (.*)\.egress.local proxy.egress.svc.cluster.local
        log
    }
---
apiVersion: v1
kind: Service
metadata:
  name: coredns
  namespace: egress
  labels:
    app.kubernetes.io/instance: coredns
    app.kubernetes.io/name: coredns
  annotations:
    prometheus.io/port: "9153"
    prometheus.io/scrape: "true"
spec:
  selector:
    app.kubernetes.io/instance: coredns
    app.kubernetes.io/name: coredns
  ports:
  - port: 53
    protocol: UDP
    name: udp-53
  - port: 53
    protocol: TCP
    name: tcp-53
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coredns
  namespace: egress
  labels:
    app.kubernetes.io/instance: coredns
    app.kubernetes.io/name: coredns
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 10%
  selector:
    matchLabels:
      app.kubernetes.io/instance: coredns
      app.kubernetes.io/name: coredns
  template:
    metadata:
      labels:
        app.kubernetes.io/name: coredns
        app.kubernetes.io/instance: coredns
    spec:
      serviceAccountName: default
      containers:
      - name: "coredns"
        image: "coredns/coredns:1.6.9"
        imagePullPolicy: IfNotPresent
        args: [ "-conf", "/etc/coredns/Corefile" ]
        volumeMounts:
        - name: config-volume
          mountPath: /etc/coredns
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 128Mi
        ports:
        - containerPort: 53
          protocol: UDP
          name: udp-53
        - containerPort: 53
          protocol: TCP
          name: tcp-53

        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /ready
            port: 8181
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
      volumes:
        - name: config-volume
          configMap:
            name: coredns-coredns
            items:
            - key: Corefile
              path: Corefile
